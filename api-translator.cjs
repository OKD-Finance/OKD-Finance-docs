/* eslint-env node */
const fs = require('fs');
const path = require('path');

// API Documentation Translator
class APITranslator {
  constructor(config = {}) {
    this.config = {
      sourceDir: config.sourceDir || './docs/en/api',
      targetDirs: config.targetDirs || {
        ru: './docs/ru/api',
        zh: './docs/zh/api'
      },
      translationService: config.translationService || 'mock',
      apiKey: config.apiKey || process.env.TRANSLATION_API_KEY,
      preserveTerms: config.preserveTerms || [
        'API', 'HTTP', 'JSON', 'REST', 'GET', 'POST', 'PUT', 'DELETE', 'PATCH',
        'cURL', 'TypeScript', 'JavaScript', 'PHP', 'Python', 'Go',
        'OAuth', 'JWT', 'UUID', 'URL', 'URI', 'KYC', 'OKD', 'ByBit',
        'WebSocket', 'endpoint', 'token', 'refresh', 'access', 'Bearer',
        'Content-Type', 'Authorization', 'application/json'
      ],
      ...config
    };

    this.translations = {
      ru: {
        'API Reference': '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API',
        'Overview': '–û–±–∑–æ—Ä',
        'Authentication': '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è',
        'Parameters': '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã',
        'Response': '–û—Ç–≤–µ—Ç',
        'Request': '–ó–∞–ø—Ä–æ—Å',
        'Example': '–ü—Ä–∏–º–µ—Ä',
        'Examples': '–ü—Ä–∏–º–µ—Ä—ã',
        'Response Examples': '–ü—Ä–∏–º–µ—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤',
        'Code Examples': '–ü—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞',
        'Description': '–û–ø–∏—Å–∞–Ω–∏–µ',
        'Required': '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
        'Optional': '–ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π',
        'Type': '–¢–∏–ø',
        'Default': '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        'Status Code': '–ö–æ–¥ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
        'Success': '–£—Å–ø–µ—Ö',
        'Error': '–û—à–∏–±–∫–∞',
        'Wallet': '–ö–æ—à–µ–ª–µ–∫',
        'User': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'Trading': '–¢–æ—Ä–≥–æ–≤–ª—è',
        'Spot': '–°–ø–æ—Ç',
        'Order': '–û—Ä–¥–µ—Ä',
        'Balance': '–ë–∞–ª–∞–Ω—Å',
        'Transaction': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è',
        'History': '–ò—Å—Ç–æ—Ä–∏—è',
        'Configuration': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
        'Subscription': '–ü–æ–¥–ø–∏—Å–∫–∞',
        'Websocket': '–í–µ–±-—Å–æ–∫–µ—Ç',
        'Exchange': '–ë–∏—Ä–∂–∞',
        'Referral': '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è',
        'Program': '–ü—Ä–æ–≥—Ä–∞–º–º–∞',
        'Operations': '–û–ø–µ—Ä–∞—Ü–∏–∏',
        'Managed': '–£–ø—Ä–∞–≤–ª—è–µ–º—ã–π',
        'Datasource': '–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö',
        'Errors': '–û—à–∏–±–∫–∏'
      },
      zh: {
        'API Reference': 'API ÂèÇËÄÉ',
        'Overview': 'Ê¶ÇËø∞',
        'Authentication': 'Ë∫´‰ªΩÈ™åËØÅ',
        'Parameters': 'ÂèÇÊï∞',
        'Response': 'ÂìçÂ∫î',
        'Request': 'ËØ∑Ê±Ç',
        'Example': 'Á§∫‰æã',
        'Examples': 'Á§∫‰æã',
        'Response Examples': 'ÂìçÂ∫îÁ§∫‰æã',
        'Code Examples': '‰ª£Á†ÅÁ§∫‰æã',
        'Description': 'ÊèèËø∞',
        'Required': 'ÂøÖÈúÄ',
        'Optional': 'ÂèØÈÄâ',
        'Type': 'Á±ªÂûã',
        'Default': 'ÈªòËÆ§',
        'Status Code': 'Áä∂ÊÄÅÁ†Å',
        'Success': 'ÊàêÂäü',
        'Error': 'ÈîôËØØ',
        'Wallet': 'Èí±ÂåÖ',
        'User': 'Áî®Êà∑',
        'Trading': '‰∫§Êòì',
        'Spot': 'Áé∞Ë¥ß',
        'Order': 'ËÆ¢Âçï',
        'Balance': '‰ΩôÈ¢ù',
        'Transaction': '‰∫§ÊòìËÆ∞ÂΩï',
        'History': 'ÂéÜÂè≤',
        'Configuration': 'ÈÖçÁΩÆ',
        'Subscription': 'ËÆ¢ÈòÖ',
        'Websocket': 'WebSocket',
        'Exchange': '‰∫§ÊòìÊâÄ',
        'Referral': 'Êé®Ëçê',
        'Program': 'Á®ãÂ∫è',
        'Operations': 'Êìç‰Ωú',
        'Managed': 'ÊâòÁÆ°',
        'Datasource': 'Êï∞ÊçÆÊ∫ê',
        'Errors': 'ÈîôËØØ'
      }
    };
  }

  async translateAll() {
    console.log('üåç Starting API documentation translation...');

    for (const [lang, targetDir] of Object.entries(this.config.targetDirs)) {
      console.log(`\nüìù Translating to ${lang.toUpperCase()}...`);
      await this.translateLanguage(lang, targetDir);
    }

    console.log('\nüéâ Translation completed!');
  }

  async translateLanguage(lang, targetDir) {
    if (!fs.existsSync(targetDir)) {
      fs.mkdirSync(targetDir, { recursive: true });
    }

    const sourceFiles = fs.readdirSync(this.config.sourceDir)
      .filter(file => file.endsWith('.md'))
      .filter(file => file !== 'overview.md');

    console.log(`üìã Found ${sourceFiles.length} files to translate`);

    for (const file of sourceFiles) {
      const sourcePath = path.join(this.config.sourceDir, file);
      const targetPath = path.join(targetDir, file);

      try {
        console.log(`   üîÑ Translating ${file}...`);
        await this.translateFile(sourcePath, targetPath, lang);
        console.log(`   ‚úÖ Translated ${file}`);
      } catch (error) {
        console.log(`   ‚ùå Failed to translate ${file}: ${error.message}`);
      }
    }
  }

  async translateFile(sourcePath, targetPath, lang) {
    const content = fs.readFileSync(sourcePath, 'utf8');
    const translatedContent = await this.translateContent(content, lang);
    fs.writeFileSync(targetPath, translatedContent, 'utf8');
  }

  async translateContent(content, lang) {
    let translatedContent = content;

    if (this.translations[lang]) {
      for (const [original, translation] of Object.entries(this.translations[lang])) {
        translatedContent = translatedContent.replace(
          new RegExp(`^# ${original}$`, 'gm'),
          `# ${translation}`
        );
        translatedContent = translatedContent.replace(
          new RegExp(`^## ${original}$`, 'gm'),
          `## ${translation}`
        );
        translatedContent = translatedContent.replace(
          new RegExp(`^### ${original}$`, 'gm'),
          `### ${translation}`
        );
      }
    }

    return translatedContent;
  }

  updateVitePressConfig() {
    console.log('üìù Updating VitePress configuration...');

    const configPath = 'docs/.vitepress/config.ts';
    let configContent = fs.readFileSync(configPath, 'utf8');

    const ruNavigation = `
            '/ru/api/': [
                {
                    text: '–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ API',
                    collapsed: false,
                    items: [
                        { text: '–û–±–∑–æ—Ä', link: '/ru/api/overview' },
                        { text: 'KYC API', link: '/ru/api/kyc' },
                        { text: 'API –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏', link: '/ru/api/authentication' },
                        { text: 'WebSocket –ü–æ–¥–ø–∏—Å–∫–∏', link: '/ru/api/websocket-subscriptions' },
                        { text: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–∏—Ä–∂–∏', link: '/ru/api/exchange-configuration' },
                        { text: 'API –ò—Å—Ç–æ—á–Ω–∏–∫–∞ –î–∞–Ω–Ω—ã—Ö', link: '/ru/api/datasource' },
                        { text: 'API –û—à–∏–±–æ–∫', link: '/ru/api/errors' },
                        { text: '–£–ø—Ä–∞–≤–ª—è–µ–º—ã–π API', link: '/ru/api/managed' },
                        { text: 'OKD API', link: '/ru/api/okd' },
                        { text: 'API –û–ø–µ—Ä–∞—Ü–∏–π –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', link: '/ru/api/user-operations' },
                        { text: 'API –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ü—Ä–æ–≥—Ä–∞–º–º—ã', link: '/ru/api/referral-program' },
                        { text: 'Spot API', link: '/ru/api/spot' },
                        { text: 'ByBit REST –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã', link: '/ru/api/bybit-rest-endpoints' },
                        { text: 'API –ö–æ—à–µ–ª—å–∫–∞', link: '/ru/api/wallet' },
                        { text: 'API –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', link: '/ru/api/users' },
                        { text: 'API –¢–æ—Ä–≥–æ–≤–ª–∏', link: '/ru/api/trading' }
                    ]
                }
            ],`;

    const zhNavigation = `
            '/zh/api/': [
                {
                    text: 'API ÂèÇËÄÉ',
                    collapsed: false,
                    items: [
                        { text: 'Ê¶ÇËø∞', link: '/zh/api/overview' },
                        { text: 'KYC API', link: '/zh/api/kyc' },
                        { text: 'Ë∫´‰ªΩÈ™åËØÅ API', link: '/zh/api/authentication' },
                        { text: 'WebSocket ËÆ¢ÈòÖ', link: '/zh/api/websocket-subscriptions' },
                        { text: '‰∫§ÊòìÊâÄÈÖçÁΩÆ', link: '/zh/api/exchange-configuration' },
                        { text: 'Êï∞ÊçÆÊ∫ê API', link: '/zh/api/datasource' },
                        { text: 'ÈîôËØØ API', link: '/zh/api/errors' },
                        { text: 'ÊâòÁÆ° API', link: '/zh/api/managed' },
                        { text: 'OKD API', link: '/zh/api/okd' },
                        { text: 'Áî®Êà∑Êìç‰Ωú API', link: '/zh/api/user-operations' },
                        { text: 'Êé®ËçêÁ®ãÂ∫è API', link: '/zh/api/referral-program' },
                        { text: 'Áé∞Ë¥ß API', link: '/zh/api/spot' },
                        { text: 'ByBit REST Á´ØÁÇπ', link: '/zh/api/bybit-rest-endpoints' },
                        { text: 'Èí±ÂåÖ API', link: '/zh/api/wallet' },
                        { text: 'Áî®Êà∑ API', link: '/zh/api/users' },
                        { text: '‰∫§Êòì API', link: '/zh/api/trading' }
                    ]
                }
            ],`;

    const insertAfter = `/en/bybit/': [
                {
                    text: 'ByBit Integration',
                    items: [
                        { text: 'Overview', link: '/en/bybit/overview' },
                        { text: 'Configuration', link: '/en/bybit/configuration' },
                        { text: 'Market Data', link: '/en/bybit/market-data' },
                        { text: 'Order Routing', link: '/en/bybit/order-routing' }
                    ]
                }
            ]`;

    if (configContent.includes(insertAfter) && !configContent.includes('/ru/api/')) {
      configContent = configContent.replace(
        insertAfter,
        insertAfter + ',' + ruNavigation + zhNavigation
      );

      fs.writeFileSync(configPath, configContent, 'utf8');
      console.log('‚úÖ VitePress configuration updated');
    } else {
      console.log('‚ö†Ô∏è VitePress configuration already contains multi-language navigation');
    }
  }

  async getTranslationStats() {
    const stats = {
      source: 0,
      translated: {}
    };

    if (fs.existsSync(this.config.sourceDir)) {
      stats.source = fs.readdirSync(this.config.sourceDir)
        .filter(file => file.endsWith('.md')).length;
    }

    for (const [lang, targetDir] of Object.entries(this.config.targetDirs)) {
      if (fs.existsSync(targetDir)) {
        stats.translated[lang] = fs.readdirSync(targetDir)
          .filter(file => file.endsWith('.md')).length;
      } else {
        stats.translated[lang] = 0;
      }
    }

    return stats;
  }
}

async function main() {
  const args = process.argv.slice(2);
  const translator = new APITranslator();

  try {
    if (args.length === 0 || args[0] === 'help') {
      console.log(`
üåç API Documentation Translator

Usage:
  node api-translator.cjs <command>

Commands:
  translate         - Translate all API documentation
  stats            - Show translation statistics
  config           - Update VitePress configuration
  help             - Show this help

Examples:
  node api-translator.cjs translate
  node api-translator.cjs stats
`);
      return;
    }

    switch (args[0]) {
      case 'translate':
        await translator.translateAll();
        translator.updateVitePressConfig();
        break;

      case 'stats': {
        const stats = await translator.getTranslationStats();
        console.log('üìä Translation Statistics:');
        console.log(`   Source files (EN): ${stats.source}`);
        for (const [lang, count] of Object.entries(stats.translated)) {
          console.log(`   Translated files (${lang.toUpperCase()}): ${count}`);
        }
        break;
      }

      case 'config':
        translator.updateVitePressConfig();
        break;

      default:
        console.error(`‚ùå Unknown command: ${args[0]}`);
        process.exit(1);
    }

  } catch (error) {
    console.error('‚ùå Translation failed:', error.message);
    process.exit(1);
  }
}

module.exports = { APITranslator };

if (require.main === module) {
  main();
}
